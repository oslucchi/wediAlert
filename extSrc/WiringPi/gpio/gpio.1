.TH GPIO 1 "March 2018" wiringPi "Command-Line access to Raspberry Pi's GPIO"

.SH NAME
gpio \- Command-line access to Raspberry Pi's GPIO

.SH SYNOPSIS
.B gpio
.B \-v
.PP
.B gpio
.B \-h, \-help, \--help, \--h, h, help
.PP
.B gpio
.B [ \-b | \-p | \-w ]
.B mode/read/write/aread/awrite/wb/pwm/pwmTone/clock/toggle/blink ...
.PP
.B gpio
.B [ \-x extension:params ]
.B mode/read/write/aread/awrite/pwm/toggle/blink ...
.PP
.B gpio
.B bank <bank>
.PP
.B gpio
.B readall
.PP
.B gpio
.B unexportall/exports
.PP
.B gpio
.B export/edge/unexport
.B ...
.PP
.B gpio
.B wfi
.B ...
.PP
.B gpio
.B mwfi
.B ...
.PP
.B gpio
.B drive
group value
.PP
.B gpio
.B usbp
high | low
.PP
.B gpio
.B pwm-bal/pwm-ms
.PP
.B gpio
.B pwmr
range
.PP
.B gpio
.B load i2c/spi ...

.SH DESCRIPTION

.B GPIO
is a swiss army knife of a command line tool to allow the user easy
access to the GPIO pins on the Raspberry Pi.
It's designed for simple testing and
diagnostic purposes, but can be used in shell scripts for general if
somewhat slow control of the GPIO pins.

It can also load the SPI and I2C kernel modules if required.

Additionally, it can be used to set the exports in the \fI/sys/class/gpio\fR
system directory to allow subsequent programs to use the \fR/sys/class/gpio\fR
interface without needing to be run as root.

.SH OPTIONS

.TP
.B \-v
Output the current version including the board revision of the Raspberry Pi.

.TP
.B \-w
Use the WiringPi pin numbers.

.TP
.B \-b
Use the BCM_GPIO pins numbers. This is the default if not specified.
\fINote:\fR The BCM_GPIO pin numbers are always used with the 
export and edge commands.

.TP
.B \-p
Use the physical pin numbers.
\fINote:\fR that this applies to the P1 connector only. It is not possible to
use pins on the Revision 2 P5 connector this way, and as with \-b the
BCM_GPIO pin numbers are always used with the export and edge commands.

.TP
.B \-x extension
This causes the named extension to be initialised. Extensions
comprise of a name (e.g. mcp23017) followed by a colon, then the
pin-base, then more optional parameters depending on the extension type.

.TP
.B read <pin>
Read the digital value of the given pin and print 0 or 1 to represent the
respective logic levels.

.TP
.B write <pin> <value>
Write the given value (0 or 1) to the pin. You need to set the pin
to output mode first.

.TP
.B toggle <pin> 
Changes the state of a GPIO pin; 0 to 1, or 1 to 0.

Note unlike the blink command, the pin must be in output mode first.

.TP
.B blink <pin> 
Blinks the given pin on/off. Press Control-C to exit.

Note: This command explicitly sets the pin to output mode.

.TP
.B aread <pin>
Read the analog value of the given pin. This needs to be used in
conjunction with a -x flag to add in an extension that handles analog
inputs.

e.g. gpio -x mcp3002:200:0 aread 200

will read the first analog input on an mcp3002 SPI ADC chip.

.TP
.B awrite <pin> <value>
Write the analog value to the given pin. This needs to be used in
conjunction with a -x flag to add in an extension that handles analog
inputs. 

e.g. gpio -x mcp4802:200:0 awrite 200 128

will write the value 128 to the first DAC port on an mcp4802 chip on
the Pi's SPI bus 0.


.TP
.B wb <value>
Write the given byte to the 8 main WiringPi pins. You can prefix it with 0x
to specify a hexadecimal number. You need to set pins to output mode
first.

.TP
.B readall
Output a table of all GPIO pin values. The values represent the actual values read
if the pin is in input mode, or the last value written if the pin is in output
mode.

The readall command is usable with an extension module (via the -x parameter),
but it's unable to determine pin modes or states, so will perform both a
digital and analog read on each pin in-turn.

.TP
.B pwm <pin> <value>
Write a PWM value (0-1023) to the given pin. The pin needs to be put
into PWM mode first.

.TP
.B clock <pin> <frequency>
Set the output frequency on the given pin. The pin needs to be put into
clock mode first.

.TP
.B mode <pin> <mode>
Set a pin into \fIinput\fR, \fIoutput\fR or \fIpwm\fR mode. Can also
use the literals \fIup\fR, \fIdown\fR or \fItri\fR to set the internal
pull-up, pull-down or tristate (off) controls.

The ALT modes can also be set using \fIalt0\fR, \fIalt1\fR,  ... \fIalt5\fR.

.TP
.B unexportall
Un-Export all the GPIO pins in the /sys/class/gpio directory.

.TP
.B exports
Print a list (if any) of all the exported GPIO pins and their current values.

.TP
.B export
Export a GPIO pin in the \fI/sys/class/gpio\fR directory. Use like the
mode command above however only \fIin\fR, \fIout\fR, \fIhigh\fR and
\fRlow\fR are supported at this time. Note that the pin number is the
\fBBCM_GPIO\fR number and not the wiringPi number. The \fIhigh\fR and
\fIlow\fR commands pre-set the output value at the same time as the
export to output mode.

Once a GPIO pin has been exported, the \fBgpio\fR program changes the
ownership of the \fI/sys/class/gpio/gpioX/value\fR and if present in
later kernels, the \fI/sys/class/gpio/gpioX/edge\fR pseudo files to
that of the user running the \fBgpio\fR program. This means that you
can have a small script of gpio exports to setup the gpio pins as your
program requires without the need to run anything as root, or with the
sudo command.

.TP
.B edge
This exports a GPIO pin in the \fI/sys/class/gpio\fR directory, set
the direction to input and set the edge interrupt method to \fInone\fR,
\fIrising\fR, \fIfalling\fR or \fIboth\fR.  Use like the export command
above and note that \fBBCM_GPIO\fR pin number is used not not wiringPi pin
numbering.

Like the export commands above, ownership is set to that of the 
calling user, allowing subsequent access from user programs without
requiring root/sudo.

.TP
.B unexport
Un-Export a GPIO pin in the /sys/class/gpio directory.

.TP
.B wfi <pin> <mode>
This set the given pin to the supplied interrupt mode: rising, falling
or both then waits for the interrupt to happen. It's a non-busy wait,
so does not consume and CPU while it's waiting.

.TP
.B mwfi <pin>[,<pin>...] <mode>
This is identical to 'wfi', except it takes a comma-separated list of pins to wait for.
If any one of the pins' interrupt occurs, the wait ends.

.TP
.B drive
group value

Change the pad driver value for the given pad group to the supplied drive
value. Group is 0, 1 or 2 and value is 0-7. Do not use unless you are
absolutely sure you know what you're doing.

.TP
.B usbp
high | low

Change the USB current limiter to high (1.2 amps) or low (the default, 600mA)
This is only applicable to the Model B+ and the Model B, v2.

.TP
.B pwm-bal/pwm-ms 
Change the PWM mode to balanced (the default) or mark:space ratio (traditional)

.TP
.B pwmr
Change the PWM range register. The default is 1024.


.SH "WiringPi vs. BCM_GPIO Pin numbering vs. Physical pin numbering"

.PP
The quickest way to get a list of the pin differences is to run the command
.TP
gpio readall

.SH FILES

.TP 2.2i
.I gpio
executable

.SH EXAMPLES
.TP 2.2i
gpio mode 4 output # Set pin 4 to output
.PP
gpio -b mode 23 output # Set GPIO pin 23 to output (same as WiringPi pin 4)
.PP
gpio mode 1 pwm # Set GPIO pin 1 to PWM mode
.PP
gpio pwm 1 512 # Set GPIO pin 1 to PWM value 512 - half brightness
.PP
gpio export 17 out # Set GPIO Pin 17 to output
.PP
gpio -w export 0 in # Set WiringPi Pin 0 to input.
.PP
gpio -w read 0 # Read WiringPi Pin 0 (SDA0)

.SH "NOTES"

When using the \fIexport\fR, \fIedge\fR or \fIunexport\fR commands, the
pin numbers are \fBalways\fR native BCM_GPIO numbers and never wiringPi
pin numbers.

As of kernels 4.1.7, a user-level GPIO access mechanism is available,
however wiringPi will not use this by default - because at this time
there appears to be issues when trying to program the PWM or clock output
hardware. If you can live without PWM or GPIO clocks and you want to use
the GPIO from a non-root program, then you need to make sure that the 
module \fIbcm2835_gpiomem\fR is loaded at boot time. This should happen
automatically when you enable the device tree in raspi-config. You may
also need some additional information in /etc/udev/rules.d/ to change the
mode and ownership of the /dev/gpiomem file.

.SH "SEE ALSO"

.LP
WiringPi's home page
.IP
https://github.com/WiringPi/WiringPi/

.SH AUTHOR

Gordon Henderson (2012-2018)

.SH "REPORTING BUGS"

Please report bugs to https://github.com/WiringPi/WiringPi/issues

.SH COPYRIGHT

Copyright (c) 2012-2018 Gordon Henderson

This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

.SH TRADEMARKS AND ACKNOWLEDGEMENTS

Raspberry Pi is a trademark of the Raspberry Pi Foundation. See
http://raspberrypi.org/ for full details.
